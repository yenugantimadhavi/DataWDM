1.List of Programs:
1The intervals and corresponding frequencies are as follows. age frequency
1-5. 200 
5-15 450 
15-20 300 
20-50 1500 
50-80 700 
80-110 44
Compute an approximate median value for the dat
# Given data
age_intervals <- c("1-5", "5-15", "15-20", "20-50", "50-80", "80-110")
frequencies <- c(200, 450, 300, 1500, 700, 44)
# Calculate cumulative frequencies
cumulative_freq <- cumsum(frequencies)
# Find the class interval containing the median
N <- sum(frequencies)
median_class_index <- which(cumulative_freq >= N / 2)[1]
median_class <- age_intervals[median_class_index]
# Extract lower and upper bounds of the median class
median_class_bounds <- as.numeric(strsplit(median_class, "-")[[1]])
L <- median_class_bounds[1]
U <- median_class_bounds[2]
# Calculate the approximate median
F <- cumulative_freq[median_class_index - 1]
f <- frequencies[median_class_index]
w <- U - L
median <- L + ((N / 2 - F) / f) * w
median


2.Suppose that the data for analysis includes the attribute age. The age values for the data 
tuples are (in increasing order) 13, 15, 16, 16, 19, 20, 20, 21, 22, 22, 25, 25, 25, 25, 30, 33, 
33, 35, 35, 35, 35, 36, 40, 45, 46, 52, 70.
(a) What is the mean of the data? What is the median?
(b) What is the mode of the data? Comment on the data’s modality (i.e., bimodal, trimodal, 
etc.).
(c) What is the midrange of the data?
(d) Can you find (roughly) the first quartile (Q1) and the third quartile (Q3) of the data?
ge <- c(13, 15, 16, 16, 19, 20, 20, 21, 22, 22, 25, 25, 25, 25, 30, 33, 33, 35, 35, 
         35, 35, 36, 40, 45, 46, 52, 70)
# (a) Mean and Median
mean_age <- mean(age)
median_age <- median(age)
# (b) Mode
mode_age <- names(table(age))[which.max(table(age))]
# (c) Midrange
midrange_age <- (max(age) + min(age)) / 2
# (d) Quartiles
Q1 <- quantile(age, 0.25)
Q3 <- quantile(age, 0.75)
# Print the results
print(paste("Mean:", mean_age))
print(paste("Median:", median_age))
print(paste("Mode:", mode_age))
print(paste("Midrange:", midrange_age))
print(paste("Q1:", Q1))
print(paste("Q3:", Q3))


3.Data Preprocessing :Reduction and Transformation
 Use the two methods below to normalize the following group of data: 200, 300, 400, 600, 
1000 (a) min-max normalization by setting min = 0 and max = 1 (b) z-score normalization
# Given data
data <- c(200, 300, 400, 600, 1000)
# Min-max normalization
min_max <- function(x) {
  (x - min(x)) / (max(x) - min(x))
}
min_max_normalized <- min_max(data)
min_max_normalized
# Z-score normalization
z_score <- function(x) {
  (x - mean(x)) / sd(x)
}
z_score_normalized <- z_score(data)
z_score_normalized


4.Data:11,13,13,15,15,16,19,20,20,20,21,21,22,23,24,30,40,45,45,45,71,
72,73,75
 a) Smoothing by bin mean
b) Smoothing by bin median
c) Smoothing by bin boundaries
# Prices data
prices <- c(1, 1, 5, 5, 5, 5, 5, 8, 8, 10, 10, 10, 10, 12, 14, 14, 14, 15, 15, 15, 15, 15, 
            15, 18, 18, 18, 18, 18, 18, 18, 18, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 25, 25, 
            25, 25, 25, 28, 28, 30)

# Equal-frequency partitioning with bin equal to 3
num_bins <- 3
bin_boundaries <- cut(prices, breaks = num_bins)

# Extract unique bin boundaries and convert to numeric
bin_boundaries_clean <- as.numeric(levels(bin_boundaries))[bin_boundaries]

# Plot histogram for frequency division
hist(prices, breaks = bin_boundaries_clean, main = "Histogram of Prices", xlab = "Price", col = "lightblue")
print(bin_boundaries)
print(bin_boundaries_clean)


5.Suppose that a hospital tested the age and body fat data for 18 randomly selected adults 
with the following results:
Calculate the mean, median, and standard deviation of age and %fat. (b) Draw the 
boxplots for age and %fat.
(c) Draw a scatter plot and a q-q plot based on these two variables.
# Age and body fat data
age <- c(23, 23, 27, 27, 39, 41, 47, 49, 50, 52, 54, 54, 56, 57, 58, 58, 60, 61)
body_fat <- c(9.5, 26.5, 7.8, 17.8, 31.4, 25.9, 27.4, 27.2, 31.2, 34.6, 42.5, 28.8,
              33.4, 30.2, 34.1, 32.9, 41.2, 35.7)

# (a) Calculate mean, median, and standard deviation
mean_age <- mean(age)
median_age <- median(age)
sd_age <- sd(age)
mean_fat <- mean(body_fat)
median_fat <- median(body_fat)
sd_fat <- sd(body_fat)

# (b) Boxplots
par(mfrow = c(1, 2))
boxplot(age, main = "Age", ylab = "Age", col = "lightblue")
boxplot(body_fat, main = "Body Fat %", ylab = "Body Fat %", col = "lightgreen")

# (c) Scatter plot and q-q plot
par(mfrow = c(1, 2))
plot(age, body_fat, xlab = "Age", ylab = "Body Fat %", main = "Scatter Plot")
qqnorm(age, main = "Q-Q Plot: Age")  # Compare with theoretical normal distribution
qqline(age)

qqnorm(body_fat, main = "Q-Q Plot: Body Fat %")  # Compare body fat with theoretical normal distribution
qqline(body_fat)

# Print the results
cat("Age: Mean =", mean_age, ", Median =", median_age, ", SD =", sd_age, "\n")
cat("Body Fat %: Mean =", mean_fat, ", Median =", median_fat, ", SD =", sd_fat, "\n")



6.Suppose that a hospital tested the age and body fat data for 18 randomly selected adults 
with the following results: 
(i) Use min-max normalization to transform the value 35 for age onto the range [0.0, 1.0].
(ii) Use z-score normalization to transform the value 35 for age, where the standard deviation 
of age is 12.94 years.
(iii) Use normalization by decimal scaling to transform the value 35 for age. Perform the 
above functions using R – tool 
# Given value for age
age_value <- 35
# (i) Min-max normalization
min_age <- min(age)
max_age <- max(age)
min_max_age <- (age_value - min_age) / (max_age - min_age)
# (ii) Z-score normalization
mean_age <- mean(age)
sd_age <- 12.94
z_score_age <- (age_value - mean_age) / sd_age
# (iii) Normalization by decimal scaling
scale_factor <- 10 ^ ceiling(log10(max(age)))
decimal_scaled_age <- age_value / scale_factor
# Print the results
cat("Min-max normalization for age:", min_max_age, "\n")
cat("Z-score normalization for age:", z_score_age, "\n")
cat("Normalization by decimal scaling for age:", decimal_scaled_age, "\n")



7.The following values are the number of pencils available in the different boxes. Create a 
vector and find out the mean, median and mode values of set of pencils in the given data. 
Box1 Box2 Box3 Box4 Box5 Box6 Box7 Box8 Box9 Box 10
9 25 23 12 11 6 7 8 9 10
# Given data
pencils <- c(9, 25, 23, 12, 11, 6, 7, 8, 9, 10)
# Mean
mean_pencils <- mean(pencils)
# Median
median_pencils <- median(pencils)
# Mode (using the 'Mode' function)
Mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}
mode_pencils <- Mode(pencils)
# Print the results
cat("Mean:", mean_pencils, "\n")
cat("Median:", median_pencils, "\n")
cat("Mode:", mode_pencils, "\n")



8.the following table would be plotted as (x,y) points, with the first column being the x 
values as number of mobile phones sold and the second column being the y values as money. 
To use the scatter plot for how many mobile phones sold. 
x :4 1 5 7 10 2 50 25 90 36 
y :12 5 13 19 31 7 153 72 275 110 
# Given data
x <- c(4, 1, 5, 7, 10, 2, 50, 25, 90, 36)
y <- c(12, 5, 13, 19, 31, 7, 153, 72, 275, 110)
plot(x, y, xlab = "Number of Mobile Phones Sold", ylab = "Money", main = 
       "Scatter Plot of Mobile Phones Sold vs Money") 



9.Implement of the R script using marks scored by a student in his model exam has been 
sorted as follows: 55, 60, 71, 63, 55, 65, 50, 55,58,59,61,63,65,67,71,72,75. Partition them 
into three bins by each of the following methods. Plot the data points using histogram. 
(a) equal-frequency (equi-depth) partitioning (b) equal-width partitioning 
# Given data
marks <- c(55, 60, 71, 63, 55, 65, 50, 55, 58, 59, 61, 63, 65, 67, 71, 72, 75)
# (a) Equal-frequency (equi-depth) partitioning
equal_freq_bins <- cut(marks, breaks = 3, labels = FALSE)
# (b) Equal-width partitioning
min_mark <- min(marks)
max_mark <- max(marks)
width <- (max_mark - min_mark) / 3
equal_width_bins <- cut(marks, breaks = seq(min_mark, max_mark + width, by = 
                                              width), labels = FALSE)
# Plotting histogram
par(mfrow = c(1, 2))
hist(marks, breaks = 3, main = "Equal-frequency Partitioning", xlab = "Marks", 
     ylab = "Frequency", col = "lightblue", border = "black")
abline(v = breaks, col = "red", lty = 2)
hist(marks, breaks = seq(min_mark, max_mark + width, by = width), main = 
       "Equal-width Partitioning", xlab = "Marks", ylab = "Frequency", col = 
       "lightgreen", border = "black")
abline(v = breaks, col = "red", lty = 2)
# Reset plot layout
par(mfrow = c(1, 1))


10.Suppose that the speed car is mentioned in different driving style. 
Regular 78.3 81.8 82 74.2 83.4 84.5 82.9 77.5 80.9 70.6 Speed 
Calculate the Inter quantile and standard deviation of the given data.
# Given data
  age <- c(13, 15, 16, 16, 19, 20, 20, 21, 22, 22, 25, 25, 25, 25, 30, 33, 33, 35, 35, 
           35, 35, 36, 40, 45, 46, 52, 70)
  # First quartile (Q1)
  q1 <- quantile(age, 0.25)
  # Third quartile (Q3)
  q3 <- quantile(age, 0.75)
  # Print the results
  cat("First quartile (Q1):", q1, "\n")
  cat("Third quartile (Q3):", q3, "\n")
  
